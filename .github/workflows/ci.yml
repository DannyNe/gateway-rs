on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
    tags: ["v*"]

name: ci

env:
  BUILD_CMD: cross

jobs:
  hygiene:
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt

      - name: cancel previous runs
        uses: styfle/cancel-workflow-action@0.11.0
        with:
          access_token: ${{ github.token }}

      - name: install dependencies
        run: sudo apt-get install -y libtss2-dev

      - name: check formatting
        run: |
          cargo fmt  -- --check

      - name: clippy
        run: |
          cargo clippy --all-features -- -D clippy::all

      - name: Run tests
        run: cargo test

  build:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        target:
          - arm-unknown-linux-gnueabihf
          - armv5te-unknown-linux-musleabi
          - armv7-unknown-linux-gnueabihf
          - armv7-unknown-linux-musleabihf
          - aarch64-unknown-linux-gnu
          - mips-unknown-linux-musl
          - mipsel-unknown-linux-musl
          - x86_64-unknown-linux-gnu
        feature:
          - ecc608
        include:
          - target: x86_64-unknown-linux-gnu
            feature: tpm
    steps:
      - uses: dtolnay/rust-toolchain@stable
      - uses: actions/checkout@v3

      - name: install dependencies
        if: ${{ matrix.feature == 'tpm' }}
        run: |
          sudo apt-get install -y libtss2-dev llvm-dev libclang-dev clang

      - name: install cross
        if: ${{ ! startsWith(matrix.target, 'x86_64') }}
        uses: jaxxstorm/action-install-gh-release@v1.9.0
        env:
          ## Allow cross install into PATH
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          repo: rust-embedded/cross

      - name: confirm build command
        if: ${{ startsWith(matrix.target, 'x86_64') }}
        run: |
          echo "BUILD_CMD=cargo" >> $GITHUB_ENV

      - name: build binary
        run: |
          ${{ env.BUILD_CMD }} \
            build \
            --target ${{ matrix.target }} \
            --no-default-features \
            --features ${{ matrix.feature }} \
            --release
          cp config/default.toml target/${{ matrix.target }}/release
          tar -zcvf helium-gateway-${{ matrix.feature }}-${{ matrix.target }}.tar.gz \
            -C target/${{ matrix.target }}/release \
              helium_gateway \
              default.toml
        env:
          RUST_BACKTRACE: 1
          LIBCLANG_PATH: "/usr/lib/llvm-14/lib/"

      - name: cache binary
        uses: actions/upload-artifact@v3
        with:
          name: helium-gateway-${{ matrix.feature }}-${{ matrix.target }}
          if-no-files-found: error
          path: |
            helium-gateway-${{ matrix.feature }}-${{ matrix.target }}.tar.gz

  release:
    if: startsWith(github.ref, 'refs/tags')
    needs: [hygiene, build]
    runs-on: ubuntu-22.04

    steps:
      - name: fetch cached binaries
        uses: actions/download-artifact@v3
        with:
          path: helium-gateway-*.tar.gz

      - name: create release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.vars.outputs.tag }}
          name: Release ${{ steps.vars.outputs.tag }}
          files: helium-gateway-*.tar.gz
